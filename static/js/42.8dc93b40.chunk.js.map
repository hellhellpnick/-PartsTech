{"version":3,"file":"static/js/42.8dc93b40.chunk.js","mappings":"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","sources":["redux/postsFeatures/postsOperation.ts","hooks/useActionPosts.tsx","components/Posts/Posts.tsx","views/PagePosts/PostsView.tsx"],"sourcesContent":["import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { IPostOne } from '../../modules/InterfacePosts';\r\nimport {\r\n  getPostsRequest,\r\n  getPostSuccess,\r\n  getPostError,\r\n  getPostRequest,\r\n  getCommentsSuccess,\r\n  getCommentsError,\r\n  getCommentsRequest,\r\n  getPostsSuccess,\r\n} from './postsAction';\r\n\r\naxios.defaults.baseURL = 'https://jsonplaceholder.typicode.com';\r\n\r\nexport const getPosts = (setState: any) => async (dispatch: Dispatch<{ type: string }>) => {\r\n  dispatch(getPostsRequest());\r\n  try {\r\n    const { data } = await axios.get<any>(`/posts`);\r\n\r\n    dispatch(getPostsSuccess(data));\r\n    setState(data);\r\n  } catch (error) {\r\n    dispatch(getPostError((error as Error).message));\r\n  }\r\n};\r\n\r\nexport const getPost =\r\n  (id: string | undefined, setPost: any) => async (dispatch: Dispatch<{ type: string }>) => {\r\n    dispatch(getPostRequest());\r\n\r\n    try {\r\n      const { data } = await axios.get<IPostOne>(`/posts/${id}`);\r\n\r\n      dispatch(getPostSuccess(data));\r\n      setPost(data);\r\n    } catch (error) {\r\n      dispatch(getPostError((error as Error).message));\r\n    }\r\n  };\r\n\r\nexport const getPostComments =\r\n  (id: any, setComment: any) => async (dispatch: Dispatch<{ type: string }>) => {\r\n    dispatch(getCommentsRequest());\r\n\r\n    try {\r\n      const { data } = await axios.get(`/posts/${id}/comments`);\r\n\r\n      dispatch(getCommentsSuccess(data));\r\n      setComment(data);\r\n    } catch (error) {\r\n      dispatch(getCommentsError((error as Error).message));\r\n    }\r\n  };\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { useCallback } from 'react';\r\nimport { getPost, getPostComments, getPosts } from '../redux/postsFeatures/postsOperation';\r\nimport {\r\n  IActivePost,\r\n  IActiveComment,\r\n  ILoadingPost,\r\n  ILoadingComment,\r\n  ILoadingPosts,\r\n  IPosts,\r\n} from '../modules/InterfaceRedux';\r\n\r\nconst useActionPosts = () => {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector((state: IPosts) => state.posts.posts);\r\n  const activePost = useSelector((state: IActivePost) => state.posts.activePost);\r\n  const activeComment = useSelector((state: IActiveComment) => state.posts.activeCommentPost);\r\n  const loadingPost = useSelector((state: ILoadingPost) => state.posts.isLoadingPost);\r\n  const loadingComment = useSelector((state: ILoadingComment) => state.posts.isLoadingComments);\r\n  const loadinPosts = useSelector((state: ILoadingPosts) => state.posts.isLoadingPosts);\r\n\r\n  const getActivePost = useCallback(\r\n    (id: string | undefined, setPost: any) => {\r\n      dispatch(getPost(id, setPost));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  const getComments = useCallback(\r\n    (id: any, setComment: any) => {\r\n      dispatch(getPostComments(id, setComment));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  const getAllPosts = useCallback(\r\n    (setState: any) => {\r\n      dispatch(getPosts(setState));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  return {\r\n    posts,\r\n    activePost,\r\n    activeComment,\r\n    loadingPost,\r\n    loadingComment,\r\n    loadinPosts,\r\n    getActivePost,\r\n    getComments,\r\n    getAllPosts,\r\n  };\r\n};\r\n\r\nexport default useActionPosts;\r\n","import { useState, useEffect } from 'react';\r\nimport PaginatedItems from './PaginatedItems';\r\nimport { SectionPosts, BoxCenterPosts } from './Posts.styled';\r\nimport { MessageText } from '../PostPage/Comment/Comments.styled';\r\nimport MiniLoader from '../Loader/MiniLoader/MiniLoader';\r\nimport InputPost from './Input/InputPost';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport useActionPosts from '../../hooks/useActionPosts';\r\n\r\nconst Posts = () => {\r\n  const { posts, loadinPosts, getAllPosts } = useActionPosts();\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const postQuery = searchParams.get('post') || '';\r\n  const [isPosts, setPosts] = useState([{ title: '', id: 1 }] || posts);\r\n  const [isSearch, setSearch] = useState(postQuery);\r\n\r\n  useEffect(() => {\r\n    getAllPosts(setPosts);\r\n  }, [getAllPosts]);\r\n\r\n  const filterPosts = (e: React.FormEvent<HTMLInputElement>) => {\r\n    const value = e.currentTarget.value;\r\n    setSearch(value);\r\n    setSearchParams({ post: value });\r\n  };\r\n\r\n  return (\r\n    <SectionPosts>\r\n      <BoxCenterPosts>\r\n        <form autoComplete=\"off\">\r\n          <InputPost\r\n            nameInput={isSearch}\r\n            textInput=\"Search post on text..\"\r\n            isFixed={true}\r\n            addFunction={filterPosts}\r\n          />\r\n        </form>\r\n        {loadinPosts ? (\r\n          <MiniLoader />\r\n        ) : !!isPosts.length ? (\r\n          <PaginatedItems\r\n            type=\"posts\"\r\n            itemsPerPage={4}\r\n            postsArr={isPosts.filter((post) => post.title.includes(postQuery))}\r\n          />\r\n        ) : (\r\n          <MessageText>Post not found</MessageText>\r\n        )}\r\n      </BoxCenterPosts>\r\n    </SectionPosts>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import Posts from '../../components/Posts/Posts';\r\nimport useChangeTitlePage from '../../hooks/useChangeTitlePage';\r\n\r\nconst PostsView = () => {\r\n  const { ChangeTitle } = useChangeTitlePage();\r\n\r\n  ChangeTitle('JSON - posts');\r\n\r\n  return <Posts />;\r\n};\r\n\r\nexport default PostsView;\r\n"],"names":["axios","dispatch","useDispatch","posts","useSelector","state","activePost","activeComment","activeCommentPost","loadingPost","isLoadingPost","loadingComment","isLoadingComments","loadinPosts","isLoadingPosts","getActivePost","useCallback","id","setPost","getPostRequest","data","getPostSuccess","getPostError","message","getPost","getComments","setComment","getCommentsRequest","getCommentsSuccess","getCommentsError","getPostComments","getAllPosts","setState","getPostsRequest","getPostsSuccess","getPosts","useActionPosts","useSearchParams","searchParams","setSearchParams","postQuery","get","useState","title","isPosts","setPosts","isSearch","setSearch","useEffect","autoComplete","InputPost","nameInput","textInput","isFixed","addFunction","e","value","currentTarget","post","MiniLoader","length","PaginatedItems","type","itemsPerPage","postsArr","filter","includes","ChangeTitle","useChangeTitlePage"],"sourceRoot":""}