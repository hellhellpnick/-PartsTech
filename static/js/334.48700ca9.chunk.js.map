{"version":3,"file":"static/js/334.48700ca9.chunk.js","mappings":"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","sources":["redux/albumsFeatures/albumsOperation.ts","hooks/useActionAlbums.tsx","components/Albums/Albums.tsx","views/PageAlbums/AlbumsView.tsx"],"sourcesContent":["import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { IPostOne } from '../../modules/InterfacePosts';\r\nimport {\r\n  getAlbumsSuccess,\r\n  getAlbumSuccess,\r\n  getAlbumError,\r\n  getAlbumRequest,\r\n  getAlbumsPhotosSuccess,\r\n  getAlbumsPhotosError,\r\n  getAlbumsPhotosRequest,\r\n  getAlbumsRequest,\r\n} from './albumsAction';\r\n\r\naxios.defaults.baseURL = 'https://jsonplaceholder.typicode.com';\r\n\r\nexport const getAlbums = (setState: any) => async (dispatch: Dispatch<{ type: string }>) => {\r\n  dispatch(getAlbumsRequest());\r\n  try {\r\n    const { data } = await axios.get<any>(`/albums`);\r\n\r\n    dispatch(getAlbumsSuccess(data));\r\n    setState(data);\r\n  } catch (error) {\r\n    dispatch(getAlbumError((error as Error).message));\r\n  }\r\n};\r\n\r\nexport const getAlbum =\r\n  (id: string | undefined, getAlbum: any) => async (dispatch: Dispatch<{ type: string }>) => {\r\n    dispatch(getAlbumRequest());\r\n\r\n    try {\r\n      const { data } = await axios.get<IPostOne>(`/albums/${id}`);\r\n\r\n      dispatch(getAlbumSuccess(data));\r\n      getAlbum(data);\r\n    } catch (error) {\r\n      dispatch(getAlbumError((error as Error).message));\r\n    }\r\n  };\r\n\r\nexport const getAlbumPhotos =\r\n  (id: any, setPhotos: any) => async (dispatch: Dispatch<{ type: string }>) => {\r\n    dispatch(getAlbumsPhotosRequest());\r\n\r\n    try {\r\n      const { data } = await axios.get(`/albums/${id}/photos`);\r\n\r\n      dispatch(getAlbumsPhotosSuccess(data));\r\n      setPhotos(data);\r\n    } catch (error) {\r\n      dispatch(getAlbumsPhotosError((error as Error).message));\r\n    }\r\n  };\r\n","import { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAlbums, getAlbumPhotos, getAlbum } from '../redux/albumsFeatures/albumsOperation';\r\n\r\nconst useActionAlbums = () => {\r\n  const dispatch = useDispatch();\r\n  const albums = useSelector((state: any) => state.albums.albums);\r\n  const isLoadingAlbums = useSelector((state: any) => state.albums.isLoadingAlbums);\r\n  const isLoadingAlbum = useSelector((state: any) => state.albums.isLoadingAlbum);\r\n  const isLoadingPhotos = useSelector((state: any) => state.albums.isLoadingPhotos);\r\n\r\n  const getAllAlbums = useCallback(\r\n    (setState: any) => {\r\n      dispatch(getAlbums(setState));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  const getPhotos = useCallback(\r\n    (id: any, setPhotos: any) => {\r\n      dispatch(getAlbumPhotos(id, setPhotos));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  const getActiveAlbum = useCallback(\r\n    (id: any, setAlbum: any) => {\r\n      dispatch(getAlbum(id, setAlbum));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  return {\r\n    getAllAlbums,\r\n    getPhotos,\r\n    getActiveAlbum,\r\n    albums,\r\n    isLoadingAlbums,\r\n    isLoadingPhotos,\r\n    isLoadingAlbum,\r\n  };\r\n};\r\n\r\nexport default useActionAlbums;\r\n","import { useState, useEffect } from 'react';\r\nimport PaginatedItems from '../Posts/PaginatedItems';\r\nimport { SectionPosts, BoxCenterPosts } from './../Posts/Posts.styled';\r\nimport { MessageText } from '../PostPage/Comment/Comments.styled';\r\nimport MiniLoader from '../Loader/MiniLoader/MiniLoader';\r\nimport InputPost from '../Posts/Input/InputPost';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport useActionAlbums from '../../hooks/useActionAlbums';\r\n\r\nconst Albums = () => {\r\n  const { albums, getAllAlbums, isLoadingAlbums } = useActionAlbums();\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const albumQuery = searchParams.get('albums') || '';\r\n  const [isAlbums, setAlbums] = useState([{ title: '', id: 1 }] || albums);\r\n  const [isSearch, setSearch] = useState(albumQuery);\r\n\r\n  useEffect(() => {\r\n    getAllAlbums(setAlbums);\r\n  }, [getAllAlbums]);\r\n\r\n  const filterPosts = (e: React.FormEvent<HTMLInputElement>) => {\r\n    const value = e.currentTarget.value;\r\n    setSearch(value);\r\n    setSearchParams({ albums: value });\r\n  };\r\n\r\n  return (\r\n    <SectionPosts>\r\n      <BoxCenterPosts>\r\n        <form autoComplete=\"off\">\r\n          <InputPost\r\n            nameInput={isSearch}\r\n            textInput=\"Search albums on text..\"\r\n            isFixed={true}\r\n            addFunction={filterPosts}\r\n          />\r\n        </form>\r\n        {isLoadingAlbums ? (\r\n          <MiniLoader />\r\n        ) : !!isAlbums.length ? (\r\n          <PaginatedItems\r\n            type={'albums'}\r\n            itemsPerPage={4}\r\n            postsArr={isAlbums.filter((album) => album.title.includes(albumQuery))}\r\n          />\r\n        ) : (\r\n          <MessageText>Albums not found</MessageText>\r\n        )}\r\n      </BoxCenterPosts>\r\n    </SectionPosts>\r\n  );\r\n};\r\n\r\nexport default Albums;\r\n","import useChangeTitlePage from '../../hooks/useChangeTitlePage';\r\nimport Albums from './../../components/Albums/Albums';\r\n\r\nconst AlbumsView = () => {\r\n  const { ChangeTitle } = useChangeTitlePage();\r\n\r\n  ChangeTitle('JSON - albums');\r\n\r\n  return <Albums />;\r\n};\r\n\r\nexport default AlbumsView;\r\n"],"names":["axios","dispatch","useDispatch","albums","useSelector","state","isLoadingAlbums","isLoadingAlbum","isLoadingPhotos","getAllAlbums","useCallback","setState","getAlbumsRequest","data","getAlbumsSuccess","getAlbumError","message","getAlbums","getPhotos","id","setPhotos","getAlbumsPhotosRequest","getAlbumsPhotosSuccess","getAlbumsPhotosError","getAlbumPhotos","getActiveAlbum","setAlbum","getAlbum","getAlbumRequest","getAlbumSuccess","useActionAlbums","useSearchParams","searchParams","setSearchParams","albumQuery","get","useState","title","isAlbums","setAlbums","isSearch","setSearch","useEffect","autoComplete","InputPost","nameInput","textInput","isFixed","addFunction","e","value","currentTarget","MiniLoader","length","PaginatedItems","type","itemsPerPage","postsArr","filter","album","includes","ChangeTitle","useChangeTitlePage"],"sourceRoot":""}